syntax = "proto3";

package foo;
option go_package = "github.com/moneyforward/grpcake/internal/testing/pb/foo";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message BasicTypes {
  int32 int_field = 1;
  int64 long_field = 2;
  float float_field = 3;
  double double_field = 4;
  bool bool_field = 5;
  string string_field = 6;
  bytes bytes_field = 7;
}

message AdvancedTypes {
  int32 int32_field = 1;
  int64 int64_field = 2;
  uint32 uint32_field = 3;
  uint64 uint64_field = 4;
  sint32 sint32_field = 5;
  sint64 sint64_field = 6;
  fixed32 fixed32_field = 7;
  fixed64 fixed64_field = 8;
  sfixed32 sfixed32_field = 9;
  sfixed64 sfixed64_field = 10;
  float float_field = 11;
  double double_field = 12;
  bool bool_field = 13;
  string string_field = 14;
  bytes bytes_field = 15;
  google.protobuf.Timestamp timestamp_field = 16;
  google.protobuf.Duration duration_field = 17;
}

// ExampleService provides different types of RPC methods for testing.
// Therefore, the naming scheme may not conform to conventions.
service ExampleService {
  // Unary RPC
  rpc UnaryExample(BasicTypes) returns (BasicTypes) {}

  // Client streaming RPC
  rpc ClientStreamExample(stream BasicTypes) returns (BasicTypes) {}

  // Server streaming RPC
  rpc ServerStreamExample(BasicTypes) returns (stream BasicTypes) {}

  // Bi-directional streaming RPC
  rpc BidirectionalStreamExample(stream BasicTypes) returns (stream BasicTypes) {}

  // RPC with advanced types
  rpc AdvancedExample(AdvancedTypes) returns (AdvancedTypes) {}
}
