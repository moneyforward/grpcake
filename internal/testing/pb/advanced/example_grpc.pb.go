// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: advanced/example.proto

package advanced

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdvancedService_UnaryExample_FullMethodName = "/advanced.AdvancedService/UnaryExample"
)

// AdvancedServiceClient is the client API for AdvancedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvancedServiceClient interface {
	UnaryExample(ctx context.Context, in *AdvancedType, opts ...grpc.CallOption) (*AdvancedType, error)
}

type advancedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvancedServiceClient(cc grpc.ClientConnInterface) AdvancedServiceClient {
	return &advancedServiceClient{cc}
}

func (c *advancedServiceClient) UnaryExample(ctx context.Context, in *AdvancedType, opts ...grpc.CallOption) (*AdvancedType, error) {
	out := new(AdvancedType)
	err := c.cc.Invoke(ctx, AdvancedService_UnaryExample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvancedServiceServer is the server API for AdvancedService service.
// All implementations must embed UnimplementedAdvancedServiceServer
// for forward compatibility
type AdvancedServiceServer interface {
	UnaryExample(context.Context, *AdvancedType) (*AdvancedType, error)
	mustEmbedUnimplementedAdvancedServiceServer()
}

// UnimplementedAdvancedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdvancedServiceServer struct {
}

func (UnimplementedAdvancedServiceServer) UnaryExample(context.Context, *AdvancedType) (*AdvancedType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryExample not implemented")
}
func (UnimplementedAdvancedServiceServer) mustEmbedUnimplementedAdvancedServiceServer() {}

// UnsafeAdvancedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvancedServiceServer will
// result in compilation errors.
type UnsafeAdvancedServiceServer interface {
	mustEmbedUnimplementedAdvancedServiceServer()
}

func RegisterAdvancedServiceServer(s grpc.ServiceRegistrar, srv AdvancedServiceServer) {
	s.RegisterService(&AdvancedService_ServiceDesc, srv)
}

func _AdvancedService_UnaryExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvancedType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancedServiceServer).UnaryExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancedService_UnaryExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancedServiceServer).UnaryExample(ctx, req.(*AdvancedType))
	}
	return interceptor(ctx, in, info, handler)
}

// AdvancedService_ServiceDesc is the grpc.ServiceDesc for AdvancedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdvancedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "advanced.AdvancedService",
	HandlerType: (*AdvancedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryExample",
			Handler:    _AdvancedService_UnaryExample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advanced/example.proto",
}
